#!/usr/bin/env python2

from kobunsupport import load_config, handshake, read_line, write_line
from kobunsupport.irc import parse_prefix
from operator import itemgetter

handshake("nattofriends is a faggot")

config = load_config()

import re

REGEX_EXPR = re.compile(r's(.)(?P<find>.*(?!\1).)\1(?P<replace>.*(?!\1).)\1(?P<extra>\S*)$')
HISTORY = {}

def unixtime():
    import calendar
    import time
    return calendar.timegm(time.gmtime())

def safe_sub(find, replace, text):
    try:
        return re.sub(find, replace, text)
    except:
        return text #www


while True:
    server, prefix, command, args = read_line()

    if command.lower() == "privmsg":
        nick, user, host = parse_prefix(prefix)
        target, msg = args

        match = REGEX_EXPR.match(msg)
        replaced = False

        if match is not None:
            find = match.group("find")
            replace = match.group("replace")
            extra = match.group("extra")

            match_self = True
            match_target = None
            if extra == 'o':
                match_self = False
            elif extra == 's':
                match_target = nick
            elif extra.startswith('t='):
                match_target = extra[2:]

            if server in HISTORY:
                H = HISTORY[server]

                # if we have a match target, only try that
                if match_target is not None:
                    if match_target in H:
                        _, text = H[match_target]

                        new_text = safe_sub(find, replace, text)
                        if not new_text == text:
                            if match_target == nick:
                                write_line(server, "PRIVMSG", [target, "{} meant: {}".format(nick, new_text)])
                            else:
                                write_line(server, "PRIVMSG", [target, "{} thinks {} meant: {}".format(nick, match_target, new_text)])
                else:
                    # if we don't want to match ourselves, honor that.
                    if nick in H and match_self:
                        _, text = H[nick]

                        new_text = safe_sub(find, replace, text)
                        if not new_text == text:
                            replaced = True
                            write_line(server, "PRIVMSG", [target, "{} meant: {}".format(nick, new_text)])

                    if not replaced:
                        # sort by timestamp
                        SORTED_HISTORY = sorted(((H[x][0], x, H[x][1]) for x in H), key=itemgetter(0), reverse=True)
                        for _, x, text in SORTED_HISTORY:
                            new_text = safe_sub(find, replace, text)
                            if not new_text == text:
                                write_line(server, "PRIVMSG", [target, "{} thinks {} meant: {}".format(nick, x, new_text)])
                                break

        try:
            HISTORY[server][nick] = (unixtime(), msg)
        except KeyError, e:
            HISTORY[server] = {} # I'm not sure which is worse: this, or `if not server in HISTORY: ...`
            HISTORY[server][nick] = (unixtime(), msg)

# vim: set ts=4 sw=4 sta et sts=4 ai:
